#!/bin/bash
source ***REMOVED***e
***REMOVED***

time_hours=23
account_name="***REMOVED***"
number_of_cores=8
memory=24
reservation=''
notifications="NONE"
keep_slurm=0
dry_run=0
check_run=0


usage () { 
    echo "  TS_pipe launcher"
    echo "  Uppsala University, Kemi-Angst***REMOVED***, group of Stefano Crespi"
    echo 
    echo "    Usage:"
    echo "  -t    job time [h]"
    echo "  -a    account name ( ***REMOVED***|***REMOVED***|***REMOVED*** )"
    echo "  -n    number of cores/threads (1..32)"
    echo "  -m    TS mode (SMILES string with reference fragment)"
    echo "  -o    path to orca template file for the last ***REMOVED***p of pipeline"
    echo "  --postpone_orca    path to orca template file for the last ***REMOVED***p of pipeline"
    echo "  -f    force constant for CREST constrained sampling (default = 0.50)"
    echo "  -k    keep .SLURM script"
    echo "  -d    dry run (keep .SLURM, but no submission)"
    echo
    echo "  Defaults: -t 23, -a ***REMOVED***, -n 8"
    echo "  Memory is calculated an n*3 GB, except if n=32 then mem=32*n-2 (2 GB reserved for sy***REMOVED***m)"
    echo
}

PARSED=$(getopt -o t:a:n:m:o:f:hkd --long postpone_orca -- "$@")
if [[ $? -ne 0 ]]; then
  echo "Failed to parse options." >&2
  exit 1
fi

# Reset the positional parameters to the parsed options
eval set -- "$PARSED"

# Process each option
while true; do
  case "$1" in
    -t)
      time_hours="$2"
      shift 2
      ;;
    -a)
      case "$2" in
        ***REMOVED***)
          account_name="***REMOVED***"
          ;;
        ***REMOVED***)
          account_name="***REMOVED***"
          ;;
        ***REMOVED***)
          account_name="***REMOVED***"
          ;;
        *)
          echo "Unknown account"
          exit 1
          ;;
      esac
      shift 2
      ;;
    -n)
      number_of_cores="$2"
      if [[ $number_of_cores -gt 32 ]]; then
          echo "Please, set number of cores less or equal 32"
          exit 1
      elif [[ $number_of_cores -eq 32 ]]; then
          memory=94
      elif [[ $number_of_cores -le 0 ]]; then
          echo "Number of cores is 0 or less!"
          exit 1
      elif [[ $number_of_cores -lt 32 ]]; then
          let memory=3*$number_of_cores
      fi
      shift 2
      ;;
    -k)
      keep_slurm=1
      shift
      ;;
    --postpone_orca)
      postpone_orca="--postpone_orca"
      shift
      ;;
    -d)
      dry_run=1
      keep_slurm=1
      shift
      ;;
    -m)
      mode="$2"
      shift 2
      ;;
    -o)
      orca_template="$2"
      shift 2
      ;;
    -f)
      force_constant="$2"
      shift 2
      ;;
    -h)
      usage
      exit 1
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Invalid option: $1" >&2
      exit 1
      ;;
  esac
done


for file in $@; 
    do
    basename=`basename $file .xyz`
    cat <<EOF > "$basename".SLURM
#!/bin/bash
##SBATCH --nodes=1
#SBATCH --ntasks=` echo $number_of_cores `
#SBATCH --time=` echo $time_hours `:00:00 ##production time
#SBATCH --mem=` echo $memory `G
#SBATCH --partition=tetralith ##production queue
#SBATCH -A ` echo $account_name `
#SBATCH -o %s-%j.log
#SBATCH --mail-user=***REMOVED***an.peshkov@kemi.uu.se
***REMOVED***
`echo $reservation`

module load ORCA/6.0.1
export scratch=\$SNIC_TMP
export MKL_NUM_THREADS=` echo $number_of_cores `
export OMP_NUM_THREADS=` echo $number_of_cores `,1

tspipe `echo $file` -m '`echo $mode`' -o '`echo $orca_template`' -f `echo $force_constant` `echo $postpone_orca` > \$SLURM_SUBMIT_DIR/`echo $basename`.out 2>&1
EOF

    if [[ $dry_run -eq 0 ]]; then
        sbatch "$basename".SLURM
    fi
    if [[ $keep_slurm -eq 0 ]]; then
        rm "$basename".SLURM
    fi
    done